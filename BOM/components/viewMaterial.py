# Form implementation generated from reading ui file 'd:\WorkSpace\PYQT_dev\BOM\view\viewMaterial.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QApplication, QTableWidgetItem, QPushButton, QCheckBox, QMessageBox

from dao import mainListDao


class ViewMaterial_widget(QWidget):

    def __init__(self, MaterialCode, ProductCode):
        super(ViewMaterial_widget, self).__init__()
        self.now_MaterialCode = MaterialCode
        self.now_ProductCode = ProductCode
        self.total_pages = 1  # 初始化总页数为1
        self.rows_per_page = 10
        self.now_page = 1
        self.fake_data = None
        self.setupUi(self)
        self.initTable()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1200, 800)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.materialCodelabel = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.materialCodelabel.setFont(font)
        self.materialCodelabel.setText("")
        self.materialCodelabel.setObjectName("materialCodelabel")
        self.horizontalLayout.addWidget(self.materialCodelabel)

        # 设置label为当前物料编码
        self.materialCodelabel.setText(self.now_MaterialCode)

        self.label_3 = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.nameSearchEdit = QtWidgets.QLineEdit(parent=Form)
        self.nameSearchEdit.setObjectName("nameSearchEdit")
        self.horizontalLayout_2.addWidget(self.nameSearchEdit)
        self.classSearchBox = QtWidgets.QComboBox(parent=Form)
        self.classSearchBox.setObjectName("classSearchBox")
        self.classSearchBox.addItem("")
        self.classSearchBox.addItem("")
        self.classSearchBox.addItem("")
        self.classSearchBox.addItem("")
        self.horizontalLayout_2.addWidget(self.classSearchBox)
        self.searchButton = QtWidgets.QPushButton(parent=Form)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout_2.addWidget(self.searchButton)

        # 添加搜索按钮点击事件
        self.searchButton.clicked.connect(self.initTable)

        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.componentTable = QtWidgets.QTableWidget(parent=Form)
        self.componentTable.setObjectName("componentTable")
        self.componentTable.setColumnCount(0)
        self.componentTable.setRowCount(0)
        self.verticalLayout.addWidget(self.componentTable)

        # 设置表格数据随窗口大小变动
        self.componentTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)  # 设置列的自动调整模式为拉伸

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.pageShowBox = QtWidgets.QComboBox(parent=Form)
        self.pageShowBox.setObjectName("pageShowBox")
        self.pageShowBox.addItem("")
        self.pageShowBox.addItem("")
        self.pageShowBox.addItem("")
        self.pageShowBox.addItem("")
        self.horizontalLayout_3.addWidget(self.pageShowBox)

        self.pageShowBox.currentIndexChanged.connect(self.pageComboBoxChanged)

        self.pageShowlabel = QtWidgets.QLabel(parent=Form)
        self.pageShowlabel.setObjectName("pageShowlabel")
        self.horizontalLayout_3.addWidget(self.pageShowlabel)
        self.pageInputEdit = QtWidgets.QLineEdit(parent=Form)
        self.pageInputEdit.setObjectName("pageInputEdit")
        self.horizontalLayout_3.addWidget(self.pageInputEdit)
        self.goToButton = QtWidgets.QPushButton(parent=Form)
        self.goToButton.setObjectName("goToButton")
        self.horizontalLayout_3.addWidget(self.goToButton)

        # 新增前往按钮点击事件
        self.goToButton.clicked.connect(self.goToButtonClicked)

        self.forwardButton = QtWidgets.QPushButton(parent=Form)
        self.forwardButton.setObjectName("forwardButton")
        self.horizontalLayout_3.addWidget(self.forwardButton)

        # 新增前一页按钮点击事件
        self.forwardButton.clicked.connect(self.forwardButtonClicked)

        self.nextButton = QtWidgets.QPushButton(parent=Form)
        self.nextButton.setObjectName("nextButton")
        self.horizontalLayout_3.addWidget(self.nextButton)

        # 新增后一页按钮点击事件
        self.nextButton.clicked.connect(self.nextButtonClicked)

        self.verticalLayout.addLayout(self.horizontalLayout_3)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "viewMaterial"))
        self.label.setText(_translate("Form", "物料编码："))
        self.label_3.setText(_translate("Form", "零部件清单"))
        self.nameSearchEdit.setPlaceholderText(_translate("Form", "请输入名称"))
        self.classSearchBox.setItemText(0, _translate("Form", "请选择类别"))
        self.classSearchBox.setItemText(1, _translate("Form", "主料"))
        self.classSearchBox.setItemText(2, _translate("Form", "辅材"))
        self.classSearchBox.setItemText(3, _translate("Form", "包材"))
        self.searchButton.setText(_translate("Form", "搜索"))
        self.pageShowBox.setItemText(0, _translate("Form", "每页显示10条"))
        self.pageShowBox.setItemText(1, _translate("Form", "每页显示20条"))
        self.pageShowBox.setItemText(2, _translate("Form", "每页显示50条"))
        self.pageShowBox.setItemText(3, _translate("Form", "每页显示100条"))
        self.pageShowlabel.setText(_translate("Form", "第1页/共1页"))
        self.pageInputEdit.setPlaceholderText(_translate("Form", "请输入跳转的页码"))
        self.goToButton.setText(_translate("Form", "前往"))
        self.forwardButton.setText(_translate("Form", "前一页"))
        self.nextButton.setText(_translate("Form", "后一页"))

    def pageComboBoxChanged(self, index):
        """
        Handle the change in the pageComboBox
        :param index: Index of the selected item in the pageComboBox
        """
        rows_per_page_options = [10, 20, 50, 100]  # Define the available rows per page options
        self.rows_per_page = rows_per_page_options[index]  # Get the selected rows per page value

        # Reinitialize the table based on the selected rows per page
        self.now_page = 1
        self.pageInputEdit.setText("")
        self.initTable()

    def forwardButtonClicked(self):
        if self.now_page > 1:  # 如果当前页不是第一页
            self.now_page -= 1  # 更新当前页数为上一页
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = self.now_page * self.rows_per_page  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示上一页的数据
        # 如果当前页已经是第一页，则点击按钮时不执行任何操作
            
    def nextButtonClicked(self):
        if self.now_page < self.total_pages:  # 如果当前页不是最后一页
            self.now_page += 1  # 更新当前页数为下一页
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示下一页的数据
        # 如果当前页已经是最后一页，则点击按钮时不执行任何操作
            
    def goToButtonClicked(self):
        # Get the input page number
        page_text = self.pageInputEdit.text()
        if page_text.isdigit():  # Check if the input is a number
            page_number = int(page_text)

            if 1 <= page_number <= self.total_pages:
                # Calculate the start and end rows for the specified page
                start_row = (page_number - 1) * self.rows_per_page
                end_row = min(page_number * self.rows_per_page, len(self.fake_data))

                self.now_page = page_number
                self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

                # Clear the table except for the header row before displaying the new data
                self.clearTableExceptHeader()

                # Display the data for the specified page
                self.showPage(start_row, end_row)
            else:
                QMessageBox.warning(None, '系统提示', '超出页面范围！')
        else:
            QMessageBox.warning(None, '系统提示', '请输入数字！')

    def clearTableExceptHeader(self):
        self.componentTable.clearContents()
        self.componentTable.setRowCount(0)

    def showPage(self, start_row, end_row):
        rows = self.rows_per_page
        columns = 11
        self.componentTable.setRowCount(rows+1) 
        self.componentTable.setColumnCount(columns)
        self.componentTable.verticalHeader().setVisible(False)  # 隐藏垂直标题 序号

        # 设置居中和加粗的字体
        font = QFont()
        font.setBold(True)
        column_names = ["序号", "物料编码", "图纸号", "名称", "规格/型号", "材料", "颜色", "数量", "单位", "物料类别", "备注"]
        for col, text in enumerate(column_names, start=0):
            item = QTableWidgetItem(text)
            item.setFont(font)  # 设置字体为加粗
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.componentTable.setItem(0, col, item)

        # 隐藏原始的列名
        self.componentTable.horizontalHeader().setVisible(False)

        rows = min(self.rows_per_page, end_row-start_row)

        for row in range(1, rows+1):  # 从第二行开始，添加序号
            item = QTableWidgetItem(str((self.now_page-1)*self.rows_per_page + row))  # 将行号作为文本创建一个表格项
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.componentTable.setItem(row, 0, item)  # 将表格项添加到第二列

        for row in range(1, self.rows_per_page + 1):  # 从第二行开始，添加数据
            if row <= rows:
                # 显示的行
                for col in range(1, columns):  # 从第三列开始
                    item = QTableWidgetItem(str(self.fake_data[row + start_row-1][col-11]))  # 调整索引以匹配 fake_data 列表
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.componentTable.setItem(row, col, item)  # 在表格中设置项目
            else:
                # 未显示的行
                for col in range(0, columns):
                    item = QTableWidgetItem("")  # 创建空项目
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.componentTable.setItem(row, col, item)  # 在表格中设置项目

        # 第一列列宽固定
        self.componentTable.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.componentTable.setColumnWidth(0, 50)  # 设置第一列的宽度为30
        # # 第二列列宽固定
        # self.componentTable.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        # self.componentTable.setColumnWidth(1, 40)  # 设置第一列的宽度为30

        for row in range(1, self.rows_per_page + 1):
            self.componentTable.setRowHeight(row, 50)  # 设置行高为30像素

    def initTable(self):
        self.clearTableExceptHeader()
        self.fake_data = ""
        s_name = self.nameSearchEdit.text()
        s_majorCategory = self.classSearchBox.currentText()

        if s_majorCategory == "请选择类别":
            s_majorCategory = ""

        if self.now_ProductCode == "BDC":
            s_now_data = mainListDao.search_BDC_MaterialById(self.now_MaterialCode)
            
            # 获取当前物料的条件
            s_dandaoDiameter = s_now_data[0][6]
            s_dandaoLength = s_now_data[0][7]
            s_drainageMethod = s_now_data[0][8]
            s_dandaoHeadStyle = s_now_data[0][9]
            s_dandaoConfigurationCode = s_now_data[0][10]
            
            self.fake_data = mainListDao.list_bdc_component(s_name, s_majorCategory, self.now_ProductCode, s_dandaoDiameter, s_dandaoLength, s_drainageMethod, s_dandaoHeadStyle, s_dandaoConfigurationCode)
        elif self.now_ProductCode == "DC":
            s_now_data = mainListDao.search_DC_MaterialById(self.now_MaterialCode)

            # 获取当前物料的条件
            s_yinliuDiameter = s_now_data[0][6]
            s_yinliuLength = s_now_data[0][7]
            s_yinliuLockStyle = s_now_data[0][8]
            s_yinliuHeadStyle = s_now_data[0][9]
            s_yinliuConfigurationCode = s_now_data[0][10]

            self.fake_data = mainListDao.list_dc_component(s_name, s_majorCategory, self.now_ProductCode, s_yinliuDiameter, s_yinliuLength, s_yinliuLockStyle, s_yinliuHeadStyle, s_yinliuConfigurationCode)

        self.total_pages = (len(self.fake_data) + self.rows_per_page - 1) // self.rows_per_page
        # Check if the current page exceeds the total pages after the data deletion
        if self.now_page > self.total_pages:
            self.now_page = max(1, self.total_pages)  # Update the current page to the last page or the first page
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")
        else:
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

        start_row = (self.now_page - 1) * self.rows_per_page
        end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))

        self.showPage(start_row, end_row)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = ViewMaterial_widget("0","BDC")
    ui.show()

    sys.exit(app.exec())
