# Form implementation generated from reading ui file 'd:\WorkSpace\PYQT_dev\BOM\view\components.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QApplication, QTableWidgetItem, QPushButton, QCheckBox, QMessageBox

from dao import mainListDao
from components.condition import condition_widget
from components.sonSet import SonSet_widget

class component_widget(QWidget):
    def __init__(self):
        super(component_widget, self).__init__()
        self.total_pages = 1  # 初始化总页数为1
        self.rows_per_page = 10
        self.now_page = 1
        self.fake_data = None
        self.setupUi(self)
        self.initTable()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1200, 800)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(parent=Form)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.searchNameEdit = QtWidgets.QLineEdit(parent=Form)
        self.searchNameEdit.setObjectName("searchNameEdit")
        self.horizontalLayout_2.addWidget(self.searchNameEdit)

        # 添加物料编码搜索输入框
        self.searchMaterialCodeEdit = QtWidgets.QLineEdit(parent=Form)
        self.searchMaterialCodeEdit.setObjectName("searchMaterialCodeEdit")
        self.horizontalLayout_2.addWidget(self.searchMaterialCodeEdit)

        self.searchButton = QtWidgets.QPushButton(parent=Form)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout_2.addWidget(self.searchButton)

        # 绑定搜索按钮点击事件
        self.searchButton.clicked.connect(self.initTable)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.addButton = QtWidgets.QPushButton(parent=Form)
        self.addButton.setObjectName("addButton")
        self.horizontalLayout_2.addWidget(self.addButton)
        self.deleteButton = QtWidgets.QPushButton(parent=Form)
        self.deleteButton.setObjectName("deleteButton")
        self.horizontalLayout_2.addWidget(self.deleteButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.componentTable = QtWidgets.QTableWidget(parent=Form)
        self.componentTable.setObjectName("componentTable")
        self.componentTable.setColumnCount(0)
        self.componentTable.setRowCount(0)
        self.verticalLayout.addWidget(self.componentTable)

        # 设置表格数据随窗口大小变动
        self.componentTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)  # 设置列的自动调整模式为拉伸
        
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.pageSelectBox = QtWidgets.QComboBox(parent=Form)
        self.pageSelectBox.setObjectName("pageSelectBox")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.horizontalLayout_3.addWidget(self.pageSelectBox)

        self.pageSelectBox.currentIndexChanged.connect(self.pageComboBoxChanged)

        self.pageShowlabel = QtWidgets.QLabel(parent=Form)
        self.pageShowlabel.setObjectName("pageShowlabel")
        self.horizontalLayout_3.addWidget(self.pageShowlabel)
        self.pageInputEdit = QtWidgets.QLineEdit(parent=Form)
        self.pageInputEdit.setObjectName("pageInputEdit")
        self.horizontalLayout_3.addWidget(self.pageInputEdit)
        self.goToButton = QtWidgets.QPushButton(parent=Form)
        self.goToButton.setObjectName("goToButton")
        self.horizontalLayout_3.addWidget(self.goToButton)

        # 新增前往按钮点击事件
        self.goToButton.clicked.connect(self.goToButtonClicked)

        self.forwardButton = QtWidgets.QPushButton(parent=Form)
        self.forwardButton.setObjectName("forwardButton")
        self.horizontalLayout_3.addWidget(self.forwardButton)

        # 添加前一页按钮点击事件
        self.forwardButton.clicked.connect(self.forwardButtonClicked)
        
        self.nextButton = QtWidgets.QPushButton(parent=Form)
        self.nextButton.setObjectName("nextButton")
        self.horizontalLayout_3.addWidget(self.nextButton)

        # 添加后一页按钮点击事件
        self.nextButton.clicked.connect(self.nextButtonClicked)

        self.verticalLayout.addLayout(self.horizontalLayout_3)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Components"))
        self.label.setText(_translate("Form", "零部件物料库"))
        self.searchNameEdit.setPlaceholderText(_translate("Form", "请输入查询的名称"))
        self.searchMaterialCodeEdit.setPlaceholderText(_translate("Form", "请输入查询的物料编码"))
        self.searchButton.setText(_translate("Form", "搜索"))
        self.addButton.setText(_translate("Form", "新增"))
        self.deleteButton.setText(_translate("Form", "删除"))
        self.pageSelectBox.setItemText(0, _translate("Form", "每页10条"))
        self.pageSelectBox.setItemText(1, _translate("Form", "每页20条"))
        self.pageSelectBox.setItemText(2, _translate("Form", "每页50条"))
        self.pageSelectBox.setItemText(3, _translate("Form", "每页100条"))
        self.pageShowlabel.setText(_translate("Form", "第1页/共1页"))
        self.pageInputEdit.setPlaceholderText(_translate("Form", "请输入页数"))
        self.goToButton.setText(_translate("Form", "前往"))
        self.forwardButton.setText(_translate("Form", "前一页"))
        self.nextButton.setText(_translate("Form", "后一页"))

    # 新增下拉框选择显示数据量
    def pageComboBoxChanged(self, index):
        """
        Handle the change in the pageComboBox
        :param index: Index of the selected item in the pageComboBox
        """
        rows_per_page_options = [10, 20, 50, 100]  # Define the available rows per page options
        self.rows_per_page = rows_per_page_options[index]  # Get the selected rows per page value

        # Reinitialize the table based on the selected rows per page
        self.now_page = 1
        self.pageInputEdit.setText("")
        self.initTable()
    
    def forwardButtonClicked(self):
        if self.now_page > 1:  # 如果当前页不是第一页
            self.now_page -= 1  # 更新当前页数为上一页
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = self.now_page * self.rows_per_page  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示上一页的数据
        # 如果当前页已经是第一页，则点击按钮时不执行任何操作
            
    def nextButtonClicked(self):
        if self.now_page < self.total_pages:  # 如果当前页不是最后一页
            self.now_page += 1  # 更新当前页数为下一页
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示下一页的数据
        # 如果当前页已经是最后一页，则点击按钮时不执行任何操作
            
    def goToButtonClicked(self):
        # Get the input page number
        page_text = self.pageInputEdit.text()
        if page_text.isdigit():  # Check if the input is a number
            page_number = int(page_text)

            if 1 <= page_number <= self.total_pages:
                # Calculate the start and end rows for the specified page
                start_row = (page_number - 1) * self.rows_per_page
                end_row = min(page_number * self.rows_per_page, len(self.fake_data))

                self.now_page = page_number
                self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

                # Clear the table except for the header row before displaying the new data
                self.clearTableExceptHeader()

                # Display the data for the specified page
                self.showPage(start_row, end_row)
            else:
                QMessageBox.warning(None, '系统提示', '超出页面范围！')
        else:
            QMessageBox.warning(None, '系统提示', '请输入数字！')

    def master_checkbox_changed(self, state):
        if self.now_page != 1:
            length_page = len(self.fake_data) - (self.now_page - 1) * self.rows_per_page
            rows = min(self.rows_per_page, length_page)
        else:
            rows = min(self.rows_per_page, len(self.fake_data))
        for row in range(1, rows+1):  # 从第二行开始
            checkbox = self.componentTable.cellWidget(row, 0)  # 获取复选框
            if state == 2:
                checkbox.setCheckState(Qt.CheckState.Checked)  # 设置为选中状态
            else:
                checkbox.setCheckState(Qt.CheckState.Unchecked)  # 设置为未选中状态

    def clearTableExceptHeader(self):
        self.componentTable.clearContents()
        self.componentTable.setRowCount(0)

    def showPage(self, start_row, end_row):
        rows = self.rows_per_page
        columns = 13
        self.componentTable.setRowCount(rows+1) 
        self.componentTable.setColumnCount(columns)
        self.componentTable.verticalHeader().setVisible(False)  # 隐藏垂直标题 序号
        self.master_checkbox = QCheckBox()  # 将 master_checkbox 存储为对象的属性
        self.master_checkbox.setStyleSheet("QCheckBox { padding-left: 10%; text-align: center;}")
        self.master_checkbox.stateChanged.connect(self.master_checkbox_changed)

        self.componentTable.setCellWidget(0, 0, self.master_checkbox)  # 使用 self.master_checkbox

        # 设置居中和加粗的字体
        font = QFont()
        font.setBold(True)
        column_names = ["序号", "物料编码", "图纸号", "名称", "规格/型号", "材料", "颜色", "数量", "单位", "物料类别", "备注", "操作"]
        for col, text in enumerate(column_names, start=1):
            item = QTableWidgetItem(text)
            item.setFont(font)  # 设置字体为加粗
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.componentTable.setItem(0, col, item)

        # 隐藏原始的列名
        self.componentTable.horizontalHeader().setVisible(False)

        rows = min(self.rows_per_page, end_row-start_row)

        for row in range(1, rows+1):  # 从第二行开始，添加序号
            item = QTableWidgetItem(str((self.now_page-1)*self.rows_per_page + row))  # 将行号作为文本创建一个表格项
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.componentTable.setItem(row, 1, item)  # 将表格项添加到第二列

        for row in range(1, self.rows_per_page + 1):  # 从第二行开始，添加数据
            if row <= rows:
                # 显示的行
                for col in range(2, columns - 1):  # 从第三列开始
                    item = QTableWidgetItem(str(self.fake_data[row + start_row-1][col-12]))  # 调整索引以匹配 fake_data 列表
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.componentTable.setItem(row, col, item)  # 在表格中设置项目
            else:
                # 未显示的行
                for col in range(0, columns):
                    item = QTableWidgetItem("")  # 创建空项目
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.componentTable.setItem(row, col, item)  # 在表格中设置项目

        # 在最后两列添加按钮
        for row in range(rows):

            now_material_id = self.fake_data[row][13]

            checkbox = QCheckBox()  # 创建复选框
            checkbox.setStyleSheet("QCheckBox { padding-left: 10%; text-align: center;}")
            self.componentTable.setCellWidget(row+1, 0, checkbox)  # 将复选框添加到表格的第一列
            # 创建包含查看和编辑按钮的布局
            button_layout = QtWidgets.QHBoxLayout()

            # 添加编辑按钮
            edit_button = QPushButton("编辑")
            button_layout.addWidget(edit_button)  # 将编辑按钮添加到布局中

            # 添加层级按钮
            level_button_1 = QPushButton("父级")
            button_layout.addWidget(level_button_1)  # 将层级按钮添加到布局中

            # 添加层级按钮
            level_button_2 = QPushButton("子级")
            button_layout.addWidget(level_button_2)  # 将层级按钮添加到布局中

            level_button_2.clicked.connect(lambda _, now_material_code = now_material_id: self.open_sonSet_window(now_material_code))

            # 添加条件按钮
            condition_button = QPushButton("条件")
            button_layout.addWidget(condition_button)  # 将层级按钮添加到布局中

            # print(now_material_code)
            condition_button.clicked.connect(lambda _, now_material_code = now_material_id: self.open_condition_window(now_material_code))

            # 将包含按钮的布局设置为表格单元格的小部件
            widget = QtWidgets.QWidget()
            widget.setLayout(button_layout)
            self.componentTable.setCellWidget(row+1, columns-1, widget)  # 将包含按钮的布局添加到表格的最后一列

        # 第一列列宽固定
        self.componentTable.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.componentTable.setColumnWidth(0, 30)  # 设置第一列的宽度为30
        # 第二列列宽固定
        self.componentTable.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.componentTable.setColumnWidth(1, 40)  # 设置第一列的宽度为30
        # 按钮列列宽固定
        self.componentTable.horizontalHeader().setSectionResizeMode(12, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.componentTable.setColumnWidth(12, 260)  # 设置第一列的宽度为30

        for row in range(1, self.rows_per_page + 1):
            self.componentTable.setRowHeight(row, 50)  # 设置行高为30像素

    def open_condition_window(self, now_materialCode):
        self.add_condition_window = condition_widget(now_materialCode)
        self.add_condition_window.show()

    def open_sonSet_window(self, now_materialCode):
        self.son_set_window = SonSet_widget(now_materialCode)
        self.son_set_window.show()

    def initTable(self):
        self.clearTableExceptHeader()
        s_Name = self.searchNameEdit.text()
        s_MaterilaInput = self.searchMaterialCodeEdit.text()
        self.fake_data = mainListDao.list_component(s_Name, s_MaterilaInput)
        self.total_pages = (len(self.fake_data) + self.rows_per_page - 1) // self.rows_per_page
        # Check if the current page exceeds the total pages after the data deletion
        if self.now_page > self.total_pages:
            self.now_page = max(1, self.total_pages)  # Update the current page to the last page or the first page
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")
        else:
            self.pageShowlabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

        start_row = (self.now_page - 1) * self.rows_per_page
        end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))

        self.showPage(start_row, end_row)

    def closeEvent(self, event):
        for widget in QApplication.topLevelWidgets():
            if isinstance(widget, condition_widget):
                widget.close()  # 关闭所有子窗口
            if isinstance(widget, SonSet_widget):
                widget.close()  # 关闭所有子窗口  
        event.accept()  # 关闭主窗口

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = component_widget()
    ui.show()

    sys.exit(app.exec())