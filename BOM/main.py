# Form implementation generated from reading ui file 'd:\WorkSpace\PYQT_dev\BOM\view\main.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

import pandas as pd
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Alignment

from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QWidget, QApplication, QTableWidgetItem, QPushButton, QCheckBox, QMessageBox

from dao import mainListDao
from components.component import component_widget
from components.viewMaterial import ViewMaterial_widget


class main_widget(QWidget):
    def __init__(self):
        super(main_widget, self).__init__()
        self.total_pages = 1  # 初始化总页数为1
        self.rows_per_page = 10
        self.now_page = 1
        self.fake_data = None
        self.setupUi(self)
        self.initTable()
    
    def setupUi(self, widget):
        widget.setObjectName("widget")
        widget.resize(1200, 800)
        self.verticalLayout = QtWidgets.QVBoxLayout(widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(parent=widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(-1, 0, 0, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.searchButton = QtWidgets.QPushButton(parent=widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.searchButton.sizePolicy().hasHeightForWidth())
        self.searchButton.setSizePolicy(sizePolicy)
        self.searchButton.setBaseSize(QtCore.QSize(0, 0))
        self.searchButton.setAutoRepeatInterval(100)
        self.searchButton.setObjectName("searchButton")
        self.gridLayout.addWidget(self.searchButton, 0, 3, 1, 1)

        # 绑定搜索按钮点击事件
        self.searchButton.clicked.connect(self.initTable)

        self.productCodeBox = QtWidgets.QComboBox(parent=widget)
        self.productCodeBox.setObjectName("productCodeBox")
        self.productCodeBox.addItem("")
        self.productCodeBox.addItem("")
        self.productCodeBox.addItem("")
        self.gridLayout.addWidget(self.productCodeBox, 0, 0, 1, 1)

        # 添加点击事件，根据productCodeBox的选择来切换stackedWidget的页面
        self.productCodeBox.currentTextChanged.connect(self.onProductCodeChanged)

        self.resetButton_9 = QtWidgets.QPushButton(parent=widget)
        self.resetButton_9.setObjectName("resetButton_9")
        self.gridLayout.addWidget(self.resetButton_9, 0, 2, 1, 1)

        self.resetButton_9.clicked.connect(self.resetProductCodeBox)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 1, 1, 1)
        self.gridLayout.setColumnStretch(0, 1)
        self.gridLayout.setColumnStretch(1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.stackedWidget = QtWidgets.QStackedWidget(parent=widget)
        self.stackedWidget.setEnabled(True)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_0 = QtWidgets.QWidget()
        self.page_0.setObjectName("page_0")
        self.stackedWidget.addWidget(self.page_0)
        self.page_1 = QtWidgets.QWidget()
        self.page_1.setObjectName("page_1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.page_1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(parent=self.page_1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.dandaoDiameterBox = QtWidgets.QComboBox(parent=self.page_1)
        self.dandaoDiameterBox.setEditable(False)
        self.dandaoDiameterBox.setObjectName("dandaoDiameterBox")
        self.dandaoDiameterBox.addItem("")
        self.dandaoDiameterBox.addItem("")
        self.dandaoDiameterBox.addItem("")
        self.dandaoDiameterBox.addItem("")
        self.dandaoDiameterBox.addItem("")
        self.dandaoDiameterBox.addItem("")
        self.horizontalLayout_3.addWidget(self.dandaoDiameterBox)

        # 选项变化时刷新表格
        self.dandaoDiameterBox.currentTextChanged.connect(self.initTable)

        self.dandaoLengthBox = QtWidgets.QComboBox(parent=self.page_1)
        self.dandaoLengthBox.setObjectName("dandaoLengthBox")
        self.dandaoLengthBox.addItem("")
        self.dandaoLengthBox.addItem("")
        self.dandaoLengthBox.addItem("")
        self.dandaoLengthBox.addItem("")
        self.dandaoLengthBox.addItem("")
        self.horizontalLayout_3.addWidget(self.dandaoLengthBox)

        # 选项变化时刷新表格
        self.dandaoLengthBox.currentTextChanged.connect(self.initTable)

        self.drainageMethodBox = QtWidgets.QComboBox(parent=self.page_1)
        self.drainageMethodBox.setObjectName("drainageMethodBox")
        self.drainageMethodBox.addItem("")
        self.drainageMethodBox.addItem("")
        self.drainageMethodBox.addItem("")
        self.horizontalLayout_3.addWidget(self.drainageMethodBox)

        # 选项变化时刷新表格
        self.drainageMethodBox.currentTextChanged.connect(self.initTable)

        self.dandaoHeadStyleBox = QtWidgets.QComboBox(parent=self.page_1)
        self.dandaoHeadStyleBox.setObjectName("dandaoHeadStyleBox")
        self.dandaoHeadStyleBox.addItem("")
        self.dandaoHeadStyleBox.addItem("")
        self.dandaoHeadStyleBox.addItem("")
        self.horizontalLayout_3.addWidget(self.dandaoHeadStyleBox)

        # 选项变化时刷新表格
        self.dandaoHeadStyleBox.currentTextChanged.connect(self.initTable)

        self.dandaoConfigurationBox = QtWidgets.QComboBox(parent=self.page_1)
        self.dandaoConfigurationBox.setObjectName("dandaoConfigurationBox")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.dandaoConfigurationBox.addItem("")
        self.horizontalLayout_3.addWidget(self.dandaoConfigurationBox)

        # 选项变化时刷新表格
        self.dandaoConfigurationBox.currentTextChanged.connect(self.initTable)

        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.stackedWidget.addWidget(self.page_1)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(parent=self.page_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.yinliuDiameterBox = QtWidgets.QComboBox(parent=self.page_2)
        self.yinliuDiameterBox.setObjectName("yinliuDiameterBox")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.yinliuDiameterBox.addItem("")
        self.horizontalLayout_5.addWidget(self.yinliuDiameterBox)

        # 选项变化时刷新表格
        self.yinliuDiameterBox.currentTextChanged.connect(self.initTable)

        self.yinliuLengthBox = QtWidgets.QComboBox(parent=self.page_2)
        self.yinliuLengthBox.setObjectName("yinliuLengthBox")
        self.yinliuLengthBox.addItem("")
        self.yinliuLengthBox.addItem("")
        self.yinliuLengthBox.addItem("")
        self.yinliuLengthBox.addItem("")
        self.yinliuLengthBox.addItem("")
        self.yinliuLengthBox.addItem("")
        self.horizontalLayout_5.addWidget(self.yinliuLengthBox)

        # 选项变化时刷新表格
        self.yinliuLengthBox.currentTextChanged.connect(self.initTable)

        self.lockFormBox = QtWidgets.QComboBox(parent=self.page_2)
        self.lockFormBox.setObjectName("lockFormBox")
        self.lockFormBox.addItem("")
        self.lockFormBox.addItem("")
        self.lockFormBox.addItem("")
        self.horizontalLayout_5.addWidget(self.lockFormBox)

        # 选项变化时刷新表格
        self.lockFormBox.currentTextChanged.connect(self.initTable)

        self.yinliuHeadStyleBox = QtWidgets.QComboBox(parent=self.page_2)
        self.yinliuHeadStyleBox.setObjectName("yinliuHeadStyleBox")
        self.yinliuHeadStyleBox.addItem("")
        self.yinliuHeadStyleBox.addItem("")
        self.yinliuHeadStyleBox.addItem("")
        self.horizontalLayout_5.addWidget(self.yinliuHeadStyleBox)

        # 选项变化时刷新表格
        self.yinliuHeadStyleBox.currentTextChanged.connect(self.initTable)

        self.yinliuConfigureBox = QtWidgets.QComboBox(parent=self.page_2)
        self.yinliuConfigureBox.setObjectName("yinliuConfigureBox")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.yinliuConfigureBox.addItem("")
        self.horizontalLayout_5.addWidget(self.yinliuConfigureBox)

        # 选项变化时刷新表格
        self.yinliuConfigureBox.currentTextChanged.connect(self.initTable)

        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout.addWidget(self.stackedWidget)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.addButton = QtWidgets.QPushButton(parent=widget)
        self.addButton.setObjectName("addButton")
        self.gridLayout_2.addWidget(self.addButton, 0, 7, 1, 1)
        self.nextPageButton = QtWidgets.QPushButton(parent=widget)
        self.nextPageButton.setObjectName("nextPageButton")
        self.gridLayout_2.addWidget(self.nextPageButton, 2, 9, 1, 1)

        # 添加后一页按钮点击事件
        self.nextPageButton.clicked.connect(self.nextButtonClicked)

        self.forwardButton = QtWidgets.QPushButton(parent=widget)
        self.forwardButton.setObjectName("forwardButton")
        self.gridLayout_2.addWidget(self.forwardButton, 2, 8, 1, 1)

        # 添加前一页按钮点击事件
        self.forwardButton.clicked.connect(self.forwardButtonClicked)

        self.goToButton = QtWidgets.QPushButton(parent=widget)
        self.goToButton.setObjectName("goToButton")
        self.gridLayout_2.addWidget(self.goToButton, 2, 7, 1, 1)

        # 新增前往按钮点击事件
        self.goToButton.clicked.connect(self.goToButtonClicked)

        self.tableWidget = QtWidgets.QTableWidget(parent=widget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableWidget, 1, 0, 1, 10)

        # 设置表格数据随窗口大小变动
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeMode.Stretch)  # 设置列的自动调整模式为拉伸
        
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 0, 2, 1, 1)
        self.pageSelectBox = QtWidgets.QComboBox(parent=widget)
        self.pageSelectBox.setObjectName("pageSelectBox")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.pageSelectBox.addItem("")
        self.gridLayout_2.addWidget(self.pageSelectBox, 2, 4, 1, 1)

        self.pageSelectBox.currentIndexChanged.connect(self.pageComboBoxChanged)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem2, 0, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 0, 4, 1, 1)
        self.deleteButton = QtWidgets.QPushButton(parent=widget)
        self.deleteButton.setObjectName("deleteButton")
        self.gridLayout_2.addWidget(self.deleteButton, 0, 8, 1, 1)
        self.MaterialInventoryButton = QtWidgets.QPushButton(parent=widget)
        self.MaterialInventoryButton.setObjectName("MaterialInventoryButton")
        self.gridLayout_2.addWidget(self.MaterialInventoryButton, 2, 0, 1, 1)

        # 添加物料库按钮点击事件
        self.MaterialInventoryButton.clicked.connect(self.openMaterialInventory)

        self.pageShowLabel = QtWidgets.QLabel(parent=widget)
        self.pageShowLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pageShowLabel.setObjectName("pageShowLabel")
        self.gridLayout_2.addWidget(self.pageShowLabel, 2, 5, 1, 1)
        self.downloadButton = QtWidgets.QPushButton(parent=widget)
        self.downloadButton.setObjectName("downloadButton")
        self.gridLayout_2.addWidget(self.downloadButton, 0, 9, 1, 1)

        # 下载按钮点击事件
        self.downloadButton.clicked.connect(self.downloadExcels)

        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem4, 0, 5, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 0, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem6, 0, 6, 1, 1)
        self.pageInputEdit = QtWidgets.QLineEdit(parent=widget)
        self.pageInputEdit.setInputMask("")
        self.pageInputEdit.setClearButtonEnabled(True)
        self.pageInputEdit.setObjectName("pageInputEdit")
        self.gridLayout_2.addWidget(self.pageInputEdit, 2, 6, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_2.addItem(spacerItem7, 0, 3, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.verticalLayout.setStretch(3, 6)

        self.retranslateUi(widget)
        QtCore.QMetaObject.connectSlotsByName(widget)

    def retranslateUi(self, widget):
        _translate = QtCore.QCoreApplication.translate
        widget.setWindowTitle(_translate("widget", "首页"))
        self.label.setText(_translate("widget", "成品清单"))
        self.searchButton.setText(_translate("widget", "搜索"))
        self.productCodeBox.setPlaceholderText(_translate("widget", "请选择产品代号"))
        self.productCodeBox.setItemText(0, _translate("widget", "请选择产品代号"))
        self.productCodeBox.setItemText(1, _translate("widget", "DC"))
        self.productCodeBox.setItemText(2, _translate("widget", "BDC"))
        self.resetButton_9.setText(_translate("widget", "重置"))
        self.label_2.setText(_translate("widget", "胆道引流导管"))
        self.dandaoDiameterBox.setItemText(0, _translate("widget", "请选择直径"))
        self.dandaoDiameterBox.setItemText(1, _translate("widget", "6F"))
        self.dandaoDiameterBox.setItemText(2, _translate("widget", "7F"))
        self.dandaoDiameterBox.setItemText(3, _translate("widget", "8F"))
        self.dandaoDiameterBox.setItemText(4, _translate("widget", "10F"))
        self.dandaoDiameterBox.setItemText(5, _translate("widget", "12F"))
        self.dandaoLengthBox.setItemText(0, _translate("widget", "请选择有效长度"))
        self.dandaoLengthBox.setItemText(1, _translate("widget", "20cm"))
        self.dandaoLengthBox.setItemText(2, _translate("widget", "30cm"))
        self.dandaoLengthBox.setItemText(3, _translate("widget", "35cm"))
        self.dandaoLengthBox.setItemText(4, _translate("widget", "40cm"))
        self.drainageMethodBox.setItemText(0, _translate("widget", "请选择引流方式"))
        self.drainageMethodBox.setItemText(1, _translate("widget", "无内容:内外引流"))
        self.drainageMethodBox.setItemText(2, _translate("widget", "W:外引流"))
        self.dandaoHeadStyleBox.setItemText(0, _translate("widget", "请选择头端样式"))
        self.dandaoHeadStyleBox.setItemText(1, _translate("widget", "L:可锁定猪尾型"))
        self.dandaoHeadStyleBox.setItemText(2, _translate("widget", "N:非锁定猪尾型"))
        self.dandaoConfigurationBox.setItemText(0, _translate("widget", "请选择配置代号"))
        self.dandaoConfigurationBox.setItemText(1, _translate("widget", "T型"))
        self.dandaoConfigurationBox.setItemText(2, _translate("widget", "TP型"))
        self.dandaoConfigurationBox.setItemText(3, _translate("widget", "SA型"))
        self.dandaoConfigurationBox.setItemText(4, _translate("widget", "SAP型"))
        self.dandaoConfigurationBox.setItemText(5, _translate("widget", "SB型"))
        self.dandaoConfigurationBox.setItemText(6, _translate("widget", "SBP型"))
        self.label_3.setText(_translate("widget", "引流导管"))
        self.yinliuDiameterBox.setItemText(0, _translate("widget", "请选择直径"))
        self.yinliuDiameterBox.setItemText(1, _translate("widget", "5F"))
        self.yinliuDiameterBox.setItemText(2, _translate("widget", "6F"))
        self.yinliuDiameterBox.setItemText(3, _translate("widget", "7F"))
        self.yinliuDiameterBox.setItemText(4, _translate("widget", "8F"))
        self.yinliuDiameterBox.setItemText(5, _translate("widget", "10F"))
        self.yinliuDiameterBox.setItemText(6, _translate("widget", "12F"))
        self.yinliuDiameterBox.setItemText(7, _translate("widget", "14F"))
        self.yinliuDiameterBox.setItemText(8, _translate("widget", "16F"))
        self.yinliuLengthBox.setItemText(0, _translate("widget", "请选择有效长度"))
        self.yinliuLengthBox.setItemText(1, _translate("widget", "20cm"))
        self.yinliuLengthBox.setItemText(2, _translate("widget", "25cm"))
        self.yinliuLengthBox.setItemText(3, _translate("widget", "30cm"))
        self.yinliuLengthBox.setItemText(4, _translate("widget", "35cm"))
        self.yinliuLengthBox.setItemText(5, _translate("widget", "40cm"))
        self.lockFormBox.setItemText(0, _translate("widget", "请选择锁定形式"))
        self.lockFormBox.setItemText(1, _translate("widget", "L:可锁定型"))
        self.lockFormBox.setItemText(2, _translate("widget", "N:非锁定型"))
        self.yinliuHeadStyleBox.setItemText(0, _translate("widget", "请选择头端样式"))
        self.yinliuHeadStyleBox.setItemText(1, _translate("widget", "J:J型"))
        self.yinliuHeadStyleBox.setItemText(2, _translate("widget", "P:猪尾型"))
        self.yinliuConfigureBox.setItemText(0, _translate("widget", "请选择配置代号"))
        self.yinliuConfigureBox.setItemText(1, _translate("widget", "T型"))
        self.yinliuConfigureBox.setItemText(2, _translate("widget", "TP型"))
        self.yinliuConfigureBox.setItemText(3, _translate("widget", "SA型"))
        self.yinliuConfigureBox.setItemText(4, _translate("widget", "SAP型"))
        self.yinliuConfigureBox.setItemText(5, _translate("widget", "SB型"))
        self.yinliuConfigureBox.setItemText(6, _translate("widget", "SBP型"))
        self.addButton.setText(_translate("widget", "新增"))
        self.nextPageButton.setText(_translate("widget", "后一页"))
        self.forwardButton.setText(_translate("widget", "前一页"))
        self.goToButton.setText(_translate("widget", "前往"))
        self.pageSelectBox.setItemText(0, _translate("widget", "每页显示10条"))
        self.pageSelectBox.setItemText(1, _translate("widget", "每页显示20条"))
        self.pageSelectBox.setItemText(2, _translate("widget", "每页显示50条"))
        self.pageSelectBox.setItemText(3, _translate("widget", "每页显示100条"))
        self.deleteButton.setText(_translate("widget", "删除"))
        self.MaterialInventoryButton.setText(_translate("widget", "物料库"))
        self.pageShowLabel.setText(_translate("widget", "第1页/共1页"))
        self.downloadButton.setText(_translate("widget", "下载"))
        self.pageInputEdit.setPlaceholderText(_translate("widget", "请输入跳转的页码"))

    def downloadExcels(self):

        # 获取当前页的起始行和结束行
        start_row = (self.now_page - 1) * self.rows_per_page
        end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))

        material_ids = []
        material_ids_data = []

        for row in range(start_row, end_row):
            checkbox = self.tableWidget.cellWidget(row - start_row + 1, 0)  # 获取复选框
            if checkbox.isChecked():
                material_ids.append(self.fake_data[row][0])
                material_ids_data.append(self.fake_data[row])

        if (len(material_ids)>0):
            with pd.ExcelWriter('combined_excel.xlsx', engine='openpyxl') as writer:
                for id in range(len(material_ids)):

                    download_name = material_ids_data[id][3].replace("/", "' '") + ".xlsx"

                    file_name = "文件编号：" + material_ids_data[id][1]
                    version = "版本号：" + material_ids_data[id][4]
                    product_style = "产品规格：" + material_ids_data[id][3]
                    material_code = "物料编码：" + material_ids_data[id][0]

                    temp_data = pd.DataFrame("", index=range(3), columns=range(11))

                    temp_data.iloc[0,0] = material_ids_data[id][2]
                    temp_data.iloc[1,0] = file_name
                    temp_data.iloc[1,5] = version
                    temp_data.iloc[2,0] = product_style
                    temp_data.iloc[2,5] = material_code

                    # 添加零部件的列名
                    column_names = pd.DataFrame(["序号", "物料编码", "图纸号", "名称", "规格/型号", "材料", "颜色", "数量", "单位", "物料类别", "备注"]).T
                    
                    temp_data = pd.concat([temp_data, column_names], axis=0)

                    # 添加零部件
                    if material_ids_data[id][5] == "DC":
                        component_data_main = mainListDao.list_dc_component("", "主料", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])
                        component_data_packaging = mainListDao.list_dc_component("", "包材", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])
                        component_data_auxiliary = mainListDao.list_dc_component("", "辅材", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])
                    elif material_ids_data[id][5] == "BDC":
                        component_data_main = mainListDao.list_bdc_component("", "主料", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])
                        component_data_packaging = mainListDao.list_bdc_component("", "包材", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])
                        component_data_auxiliary = mainListDao.list_bdc_component("", "辅材", material_ids_data[id][5],
                                                                       material_ids_data[id][6],
                                                                       material_ids_data[id][7],
                                                                       material_ids_data[id][8],
                                                                       material_ids_data[id][9],
                                                                       material_ids_data[id][10])

                    # 添加主料
                    # 添加新的一列用于排序
                    component_data_main = pd.DataFrame(component_data_main)
                    component_data_main = component_data_main.iloc[:,13:]
                    component_data_main.insert(0, 'serialNumber', '')
                    component_data_main.columns = range(0, 11)
                    temp_data = pd.concat([temp_data, component_data_main], axis=0)


                    # 添加包材
                    # 创建一个包含单行空数据的数据框
                    index_packaging = len(temp_data) + 1
                    empty_row = pd.DataFrame([[''] * 11], columns=range(11))
                    component_data_packaging = pd.DataFrame(component_data_packaging).iloc[:,13:]
                    component_data_packaging.insert(0, 'serialNumber', '')
                    component_data_packaging.columns = range(0, 11)
                    # 将空行数据框和temp_data数据框连接起来
                    component_data_packaging = pd.concat([empty_row, component_data_packaging], ignore_index=True)
                    component_data_packaging.iloc[0,0] = "包材"
                    temp_data = pd.concat([temp_data, component_data_packaging], axis=0)

                    # 添加辅材
                    # 创建一个包含单行空数据的数据框
                    index_auxiliary = len(temp_data) + 1
                    component_data_auxiliary = pd.DataFrame(component_data_auxiliary).iloc[:,13:]
                    component_data_auxiliary.insert(0, 'serialNumber', '')
                    component_data_auxiliary.columns = range(0, 11)
                    # 将空行数据框和temp_data数据框连接起来
                    component_data_auxiliary = pd.concat([empty_row, component_data_auxiliary], ignore_index=True)
                    component_data_auxiliary.iloc[0,0] = "辅材"
                    temp_data = pd.concat([temp_data, component_data_auxiliary], axis=0)

                    # 将数据写入不同的 sheet 页
                    temp_data.to_excel(writer, sheet_name=download_name, index=False, header=False)


                    # 获取当前 sheet
                    sheet = writer.sheets[download_name]

                    # 设置合并单元格和对齐方式
                    sheet.merge_cells('A1:K1')
                    sheet['A1'].alignment = Alignment(horizontal='center')

                    sheet.merge_cells('A2:E2')
                    sheet['A2'].alignment = Alignment(horizontal='left')

                    sheet.merge_cells('F2:K2')
                    sheet['F2'].alignment = Alignment(horizontal='left')

                    sheet.merge_cells('A3:E3')
                    sheet['A3'].alignment = Alignment(horizontal='left')

                    sheet.merge_cells('F3:K3')
                    sheet['F3'].alignment = Alignment(horizontal='left')

                    sheet.merge_cells(f'A{index_packaging}:K{index_packaging}')
                    sheet[f'A{index_packaging}'].alignment = Alignment(horizontal='center')

                    sheet.merge_cells(f'A{index_auxiliary}:K{index_auxiliary}')
                    sheet[f'A{index_auxiliary}'].alignment = Alignment(horizontal='center')

            QMessageBox.information(None, '系统提示', '下载成功！')

        else:
            QMessageBox.warning(None, '系统提示', '您没有选中任何数据！')

 
    def openMaterialInventory(self):
        self.component_window = component_widget()
        self.component_window.show()

    def forwardButtonClicked(self):
        if self.now_page > 1:  # 如果当前页不是第一页
            self.now_page -= 1  # 更新当前页数为上一页
            self.pageShowLabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = self.now_page * self.rows_per_page  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示上一页的数据
        # 如果当前页已经是第一页，则点击按钮时不执行任何操作
            
    def nextButtonClicked(self):
        if self.now_page < self.total_pages:  # 如果当前页不是最后一页
            self.now_page += 1  # 更新当前页数为下一页
            self.pageShowLabel.setText(f"第{self.now_page}页/共{self.total_pages}页")  # 更新页面标签显示
            start_row = (self.now_page - 1) * self.rows_per_page  # 计算起始行
            end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))  # 计算结束行
            self.clearTableExceptHeader()  # 清空表格数据
            self.showPage(start_row, end_row)  # 显示下一页的数据
        # 如果当前页已经是最后一页，则点击按钮时不执行任何操作
            
    def goToButtonClicked(self):
        # Get the input page number
        page_text = self.pageInputEdit.text()
        if page_text.isdigit():  # Check if the input is a number
            page_number = int(page_text)

            if 1 <= page_number <= self.total_pages:
                # Calculate the start and end rows for the specified page
                start_row = (page_number - 1) * self.rows_per_page
                end_row = min(page_number * self.rows_per_page, len(self.fake_data))

                self.now_page = page_number
                self.pageShowLabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

                # Clear the table except for the header row before displaying the new data
                self.clearTableExceptHeader()

                # Display the data for the specified page
                self.showPage(start_row, end_row)
            else:
                QMessageBox.warning(None, '系统提示', '超出页面范围！')
        else:
            QMessageBox.warning(None, '系统提示', '请输入数字！')

    def resetProductCodeBox(self):
        self.productCodeBox.setCurrentIndex(0)  # 将 productCodeBox 切换到“请选择产品代号”的选项

        self.dandaoDiameterBox.setCurrentIndex(0)
        self.dandaoLengthBox.setCurrentIndex(0)
        self.drainageMethodBox.setCurrentIndex(0)
        self.dandaoHeadStyleBox.setCurrentIndex(0)
        self.dandaoConfigurationBox.setCurrentIndex(0)

        self.yinliuDiameterBox.setCurrentIndex(0)
        self.yinliuLengthBox.setCurrentIndex(0)
        self.lockFormBox.setCurrentIndex(0)
        self.yinliuHeadStyleBox.setCurrentIndex(0)
        self.yinliuConfigureBox.setCurrentIndex(0)

    def onProductCodeChanged(self, text):
        if text == "请选择产品代号":
            self.stackedWidget.setCurrentIndex(0)  # 显示第一页
            self.initTable()
        elif text == "BDC":
            self.stackedWidget.setCurrentIndex(1)  # 显示第二页
            self.initTable()
        elif text == "DC":
            self.stackedWidget.setCurrentIndex(2)  # 显示第三页
            self.initTable()

    # 新增下拉框选择显示数据量
    def pageComboBoxChanged(self, index):
        """
        Handle the change in the pageComboBox
        :param index: Index of the selected item in the pageComboBox
        """
        rows_per_page_options = [10, 20, 50, 100]  # Define the available rows per page options
        self.rows_per_page = rows_per_page_options[index]  # Get the selected rows per page value

        # Reinitialize the table based on the selected rows per page
        self.now_page = 1
        self.pageInputEdit.setText("")
        self.initTable()

    def clearTableExceptHeader(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)

    def master_checkbox_changed(self, state):
        if self.now_page != 1:
            length_page = len(self.fake_data) - (self.now_page - 1) * self.rows_per_page
            rows = min(self.rows_per_page, length_page)
        else:
            rows = min(self.rows_per_page, len(self.fake_data))
        for row in range(1, rows+1):  # 从第二行开始
            checkbox = self.tableWidget.cellWidget(row, 0)  # 获取复选框
            if state == 2:
                checkbox.setCheckState(Qt.CheckState.Checked)  # 设置为选中状态
            else:
                checkbox.setCheckState(Qt.CheckState.Unchecked)  # 设置为未选中状态

    def showPage(self, start_row, end_row):
        rows = self.rows_per_page
        columns = 8
        self.tableWidget.setRowCount(rows+1) 
        self.tableWidget.setColumnCount(columns)
        self.tableWidget.verticalHeader().setVisible(False)  # 隐藏垂直标题 序号
        self.master_checkbox = QCheckBox()  # 将 master_checkbox 存储为对象的属性
        self.master_checkbox.setStyleSheet("QCheckBox { padding-left: 10%; text-align: center;}")
        self.master_checkbox.stateChanged.connect(self.master_checkbox_changed)

        self.tableWidget.setCellWidget(0, 0, self.master_checkbox)  # 使用 self.master_checkbox

        # 设置居中和加粗的字体
        font = QFont()
        font.setBold(True)
        column_names = ["序号", "物料编码", "文件编号", "名称", "产品规格", "版本号", "操作"]
        for col, text in enumerate(column_names, start=1):
            item = QTableWidgetItem(text)
            item.setFont(font)  # 设置字体为加粗
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.tableWidget.setItem(0, col, item)

        # for col in range(columns-1, columns):
        #     item = QTableWidgetItem("")
        #     item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # Set the cells to read-only
        #     self.tableWidget.setItem(0, col, item)
        
        # 隐藏原始的列名
        self.tableWidget.horizontalHeader().setVisible(False)

        rows = min(self.rows_per_page, end_row-start_row)

        for row in range(1, rows+1):  # 从第二行开始，添加序号
            item = QTableWidgetItem(str((self.now_page-1)*self.rows_per_page + row))  # 将行号作为文本创建一个表格项
            item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
            item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
            self.tableWidget.setItem(row, 1, item)  # 将表格项添加到第二列

        for row in range(1, self.rows_per_page + 1):  # 从第二行开始，添加数据
            if row <= rows:
                # 显示的行
                for col in range(2, columns - 1):  # 从第三列开始
                    item = QTableWidgetItem(str(self.fake_data[row + start_row-1][col-2]))  # 调整索引以匹配 fake_data 列表
                    item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)  # 设置居中对齐
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.tableWidget.setItem(row, col, item)  # 在表格中设置项目
            else:
                # 未显示的行
                for col in range(0, columns):
                    item = QTableWidgetItem("")  # 创建空项目
                    item.setFlags(Qt.ItemFlag.ItemIsEnabled)  # 设置单元格为只读
                    self.tableWidget.setItem(row, col, item)  # 在表格中设置项目

        # 在最后两列添加按钮
        for row in range(rows):
            checkbox = QCheckBox()  # 创建复选框
            checkbox.setStyleSheet("QCheckBox { padding-left: 10%; text-align: center;}")
            self.tableWidget.setCellWidget(row+1, 0, checkbox)  # 将复选框添加到表格的第一列
            # 创建包含查看和编辑按钮的布局
            button_layout = QtWidgets.QHBoxLayout()

            # 添加编辑按钮
            edit_button = QPushButton("编辑")
            button_layout.addWidget(edit_button)  # 将编辑按钮添加到布局中

            # 添加查看按钮
            view_button = QPushButton("查看")
            button_layout.addWidget(view_button)  # 将查看按钮添加到布局中

            now_material_id = self.fake_data[row][0]
            now_Product_id = self.fake_data[row][5]
            view_button.clicked.connect(lambda _, material_code = now_material_id, product_code = now_Product_id: self.open_viewMaterial_window(material_code, product_code))

            # 将包含按钮的布局设置为表格单元格的小部件
            widget = QtWidgets.QWidget()
            widget.setLayout(button_layout)
            self.tableWidget.setCellWidget(row+1, columns-1, widget)  # 将包含按钮的布局添加到表格的最后一列

        # 第一列列宽固定
        self.tableWidget.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.tableWidget.setColumnWidth(0, 30)  # 设置第一列的宽度为30
        # 第二列列宽固定
        self.tableWidget.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.tableWidget.setColumnWidth(1, 40)  # 设置第一列的宽度为30
        # 按钮列列宽固定
        self.tableWidget.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeMode.Fixed)  # 设置第一列的列宽模式为固定大小
        self.tableWidget.setColumnWidth(7, 160)  # 设置第一列的宽度为30

        for row in range(1, self.rows_per_page + 1):
            self.tableWidget.setRowHeight(row, 40)  # 设置行高为30像素

    def open_viewMaterial_window(self, now_materialCode, now_product_code):
        self.open_Material_window = ViewMaterial_widget(now_materialCode, now_product_code)
        self.open_Material_window.show()

    def initTable(self):
        """
        根据条件初始化表格
        :return:
        """
        # print("initTable")
        self.clearTableExceptHeader()
        s_ProductCode = self.productCodeBox.currentText()

        if s_ProductCode == "请选择产品代号":
            self.fake_data = ""

        elif s_ProductCode == "BDC":

            # 获取胆道下拉框的筛选条件
            s_dandaoDiameter = self.dandaoDiameterBox.currentText()
            s_dandaoLength = self.dandaoLengthBox.currentText()
            s_drainageMethod = self.drainageMethodBox.currentText()
            s_dandaoHeadStyle = self.dandaoHeadStyleBox.currentText()
            s_dandaoConfigurationCode = self.dandaoConfigurationBox.currentText()

            # 胆道直径筛选条件
            if s_dandaoDiameter == "请选择直径":
                s_dandaoDiameter = ""
            else:
                s_dandaoDiameter = s_dandaoDiameter[:-1]
                if len(s_dandaoDiameter) == 1:
                    s_dandaoDiameter = "0" + s_dandaoDiameter

            # 胆道长度筛选条件
            if s_dandaoLength == "请选择有效长度":
                s_dandaoLength = ""
            else:
                s_dandaoLength = s_dandaoLength[:-2]

            # 引流方式筛选
            if s_drainageMethod == "请选择引流方式":
                s_drainageMethod = ""
            elif s_drainageMethod == "无内容:内外引流":
                s_drainageMethod = "None"
            else:
                s_drainageMethod = "W"

            # 头端样式筛选
            if s_dandaoHeadStyle == "请选择头端样式":
                s_dandaoHeadStyle = ""
            else:
                s_dandaoHeadStyle = s_dandaoHeadStyle[0:1]

            # 配置代号筛选
            if s_dandaoConfigurationCode == "请选择配置代号":
                s_dandaoConfigurationCode = ""
            else:
                s_dandaoConfigurationCode = s_dandaoConfigurationCode[:-1]

            # 获取 胆道 的数据
            result_1 = mainListDao.list_dandao(s_ProductCode, s_dandaoDiameter, s_dandaoLength, s_drainageMethod, s_dandaoHeadStyle, s_dandaoConfigurationCode)
            self.fake_data = result_1

        elif s_ProductCode == "DC":

            # 获取引流下拉框的筛选条件
            s_yinliuDiameter = self.yinliuDiameterBox.currentText()
            s_yinliuLength = self.yinliuLengthBox.currentText()
            s_yinliuLockStyle = self.lockFormBox.currentText()
            s_yinliuHeadStyle = self.yinliuHeadStyleBox.currentText()
            s_yinliuConfigurationCode = self.yinliuConfigureBox.currentText()

            # 引流直径筛选
            if s_yinliuDiameter == "请选择直径":
                s_yinliuDiameter = ""
            else:
                s_yinliuDiameter = s_yinliuDiameter[:-1]
                if len(s_yinliuDiameter) == 1:
                    s_yinliuDiameter = "0" + s_yinliuDiameter
            
            # 引流长度筛选
            if s_yinliuLength == "请选择有效长度":
                s_yinliuLength = ""
            else:
                s_yinliuLength = s_yinliuLength[:-2]

            # 引流锁定形式筛选
            if s_yinliuLockStyle == "请选择锁定形式":
                s_yinliuLockStyle = ""
            else:
                s_yinliuLockStyle = s_yinliuLockStyle[0:1]

            # 引流头端样式筛选
            if s_yinliuHeadStyle == "请选择头端样式":
                s_yinliuHeadStyle = ""
            else:
                s_yinliuHeadStyle = s_yinliuHeadStyle[0:1]

            if s_yinliuConfigurationCode == "请选择配置代号":
                s_yinliuConfigurationCode = ""
            else:
                s_yinliuConfigurationCode = s_yinliuConfigurationCode[:-1]

            result_2 = mainListDao.list_yinliu(s_ProductCode, s_yinliuDiameter, s_yinliuLength, s_yinliuLockStyle, s_yinliuHeadStyle, s_yinliuConfigurationCode)

            self.fake_data = result_2

        self.total_pages = (len(self.fake_data) + self.rows_per_page - 1) // self.rows_per_page

        # Check if the current page exceeds the total pages after the data deletion
        if self.now_page > self.total_pages:
            self.now_page = max(1, self.total_pages)  # Update the current page to the last page or the first page
            self.pageShowLabel.setText(f"第{self.now_page}页/共{self.total_pages}页")
        else:
            self.pageShowLabel.setText(f"第{self.now_page}页/共{self.total_pages}页")

        start_row = (self.now_page - 1) * self.rows_per_page
        end_row = min(self.now_page * self.rows_per_page, len(self.fake_data))

        self.showPage(start_row, end_row)
    
    def closeEvent(self, event):
        for widget in QApplication.topLevelWidgets():
            if isinstance(widget, component_widget):
                widget.close()  # 关闭所有子窗口
            if isinstance(widget, ViewMaterial_widget):
                widget.close()  # 关闭所有子窗口
        event.accept()  # 关闭主窗口

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = main_widget()
    ui.show()

    sys.exit(app.exec())